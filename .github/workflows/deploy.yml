name: Deploy to ECS

on:
  push:
    branches:
      - main  # mainブランチにプッシュされたときにデプロイ

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      run: |
        IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}"
        echo "ECR URI: $IMAGE_URI"
        
        # Dockerイメージをビルド
        docker build -t "$IMAGE_URI:latest" .
        
        # ECRにプッシュ
        docker push "$IMAGE_URI:latest"

    - name: Create ECS task definition
      run: |
        # ECRイメージURIを埋め込んだecs-task-def.jsonを生成
        cat <<EOF > ecs-task-def.json
        {
          "family": "stock-app-family",
          "networkMode": "awsvpc",
          "containerDefinitions": [
            {
              "name": "stock-app",
              "image": "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest",
              "memory": 512,
              "cpu": 256,
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 8501,  # 修正: コンテナポートを8501に変更
                  "hostPort": 8501,       # 修正: ホストポートを8501に変更
                  "protocol": "tcp"
                }
              ]
            }
          ],
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole",
          "taskRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole"
        }
        EOF
        cat ecs-task-def.json

    - name: Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ecs-task-def.json
        service: stock-app-service
        cluster: stock-app-cluster
        wait-for-service-stability: true
        environment:
          - NGROK_AUTHTOKEN=${{ secrets.NGROK_AUTHTOKEN }}  # Secretsを渡す
