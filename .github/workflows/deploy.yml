name: Deploy to ECS

on:
  push:
    branches:
      - main  # main ブランチにプッシュされたときにデプロイ

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}"
          echo "ECR URI: $IMAGE_URI"

          # Docker イメージをビルド
          docker build -t "$IMAGE_URI:latest" .

          # ECR にプッシュ
          docker push "$IMAGE_URI:latest"

      - name: Write GCP service account key to file
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        run: |
          echo "Writing GCP service account key to file..."
          python -c 'import os; with open("gcp_key.json", "w") as f: f.write(os.environ["GCP_SERVICE_ACCOUNT_KEY"])'

      - name: Create ECS task definition
        env:
          NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          # ECR イメージ URI を再定義
          IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}"

          # gcp_key.json の内容を変数に読み込む
          GCP_SERVICE_ACCOUNT_KEY_CONTENT=$(cat gcp_key.json)

          # ecs-task-def.json を生成
          cat > ecs-task-def.json <<EOF
    {
      "family": "stock-app-family",
      "networkMode": "awsvpc",
      "containerDefinitions": [
        {
          "name": "stock-app",
          "image": "${IMAGE_URI}:latest",
          "memory": 512,
          "cpu": 256,
          "essential": true,
          "portMappings": [
            {
              "containerPort": 80,
              "hostPort": 80,
              "protocol": "tcp"
            }
          ],
          "environment": [
            {
              "name": "NGROK_AUTHTOKEN",
              "value": "${NGROK_AUTHTOKEN}"
            },
            {
              "name": "GCP_SERVICE_ACCOUNT_KEY",
              "value": "${GCP_SERVICE_ACCOUNT_KEY_CONTENT}"
            }
          ]
        },
        {
          "name": "ngrok",
          "image": "ngrok/ngrok:latest",
          "memory": 128,
          "cpu": 128,
          "essential": false,
          "command": [
            "http",
            "--domain=magnetic-moccasin-fresh.ngrok-free.app",
            "localhost:80",
            "--log=stdout"
          ],
          "portMappings": [
            {
              "containerPort": 4040,
              "hostPort": 4040,
              "protocol": "tcp"
            }
          ],
          "environment": [
            {
              "name": "NGROK_AUTHTOKEN",
              "value": "${NGROK_AUTHTOKEN}"
            }
          ]
        }
      ],
      "requiresCompatibilities": ["FARGATE"],
      "cpu": "512",
      "memory": "1024",
      "executionRoleArn": "arn:aws:iam::${AWS_ACCOUNT_ID}:role/ecsTaskExecutionRole",
      "taskRoleArn": "arn:aws:iam::${AWS_ACCOUNT_ID}:role/ecsTaskExecutionRole"
    }
    EOF

          cat ecs-task-def.json

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ecs-task-def.json
          service: stock-app-service
          cluster: stock-app-cluster
          wait-for-service-stability: true
