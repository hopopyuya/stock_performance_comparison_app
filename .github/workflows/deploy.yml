name: Deploy to ECS

on:
  push:
    branches:
      - main
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - '.github/workflows/deploy.yml'
      - 'workspace/app.py'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}"
          echo "ECR URI: $IMAGE_URI"

          # Docker イメージをビルド
          docker build -t "$IMAGE_URI:latest" .

          # ECR にプッシュ
          docker push "$IMAGE_URI:latest"

      - name: Create GCP service account key file
        env:
          GCP_TYPE: ${{ secrets.GCP_TYPE }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_PRIVATE_KEY_ID: ${{ secrets.GCP_PRIVATE_KEY_ID }}
          GCP_PRIVATE_KEY: ${{ secrets.GCP_PRIVATE_KEY }}
          GCP_CLIENT_EMAIL: ${{ secrets.GCP_CLIENT_EMAIL }}
          GCP_CLIENT_ID: ${{ secrets.GCP_CLIENT_ID }}
          GCP_AUTH_URI: ${{ secrets.GCP_AUTH_URI }}
          GCP_TOKEN_URI: ${{ secrets.GCP_TOKEN_URI }}
          GCP_AUTH_PROVIDER_X509_CERT_URL: ${{ secrets.GCP_AUTH_PROVIDER_X509_CERT_URL }}
          GCP_CLIENT_X509_CERT_URL: ${{ secrets.GCP_CLIENT_X509_CERT_URL }}
        run: |
          echo "Creating GCP service account key file..."
          echo "${GCP_PRIVATE_KEY}" | sed 's/\\n/\n/g' > private_key.txt
          cat > gcp_key.json <<EOF
          {
            "type": "${GCP_TYPE}",
            "project_id": "${GCP_PROJECT_ID}",
            "private_key_id": "${GCP_PRIVATE_KEY_ID}",
            "private_key": "$(cat private_key.txt)",
            "client_email": "${GCP_CLIENT_EMAIL}",
            "client_id": "${GCP_CLIENT_ID}",
            "auth_uri": "${GCP_AUTH_URI}",
            "token_uri": "${GCP_TOKEN_URI}",
            "auth_provider_x509_cert_url": "${GCP_AUTH_PROVIDER_X509_CERT_URL}",
            "client_x509_cert_url": "${GCP_CLIENT_X509_CERT_URL}"
          }
          EOF

      - name: Create ECS task definition
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          GCP_TYPE: ${{ secrets.GCP_TYPE }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_PRIVATE_KEY_ID: ${{ secrets.GCP_PRIVATE_KEY_ID }}
          GCP_PRIVATE_KEY: ${{ secrets.GCP_PRIVATE_KEY }}
          GCP_CLIENT_EMAIL: ${{ secrets.GCP_CLIENT_EMAIL }}
          GCP_CLIENT_ID: ${{ secrets.GCP_CLIENT_ID }}
          GCP_AUTH_URI: ${{ secrets.GCP_AUTH_URI }}
          GCP_TOKEN_URI: ${{ secrets.GCP_TOKEN_URI }}
          GCP_AUTH_PROVIDER_X509_CERT_URL: ${{ secrets.GCP_AUTH_PROVIDER_X509_CERT_URL }}
          GCP_CLIENT_X509_CERT_URL: ${{ secrets.GCP_CLIENT_X509_CERT_URL }}
        run: |
          # ECR イメージ URI を再定義
          IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}"

          # ecs-task-def.json を生成
          cat > ecs-task-def.json <<EOF
          {
            "family": "stock-app-family",
            "networkMode": "awsvpc",
            "containerDefinitions": [
              {
                "name": "stock-app",
                "image": "${IMAGE_URI}:latest",
                "memory": 512,
                "cpu": 256,
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 80,
                    "protocol": "tcp"
                  }
                ],
                "environment": [
                  {
                    "name": "GCP_TYPE",
                    "value": "${GCP_TYPE}"
                  },
                  {
                    "name": "GCP_PROJECT_ID",
                    "value": "${GCP_PROJECT_ID}"
                  },
                  {
                    "name": "GCP_PRIVATE_KEY_ID",
                    "value": "${GCP_PRIVATE_KEY_ID}"
                  },
                  {
                    "name": "GCP_PRIVATE_KEY",
                    "value": "${GCP_PRIVATE_KEY}"
                  },
                  {
                    "name": "GCP_CLIENT_EMAIL",
                    "value": "${GCP_CLIENT_EMAIL}"
                  },
                  {
                    "name": "GCP_CLIENT_ID",
                    "value": "${GCP_CLIENT_ID}"
                  },
                  {
                    "name": "GCP_AUTH_URI",
                    "value": "${GCP_AUTH_URI}"
                  },
                  {
                    "name": "GCP_TOKEN_URI",
                    "value": "${GCP_TOKEN_URI}"
                  },
                  {
                    "name": "GCP_AUTH_PROVIDER_X509_CERT_URL",
                    "value": "${GCP_AUTH_PROVIDER_X509_CERT_URL}"
                  },
                  {
                    "name": "GCP_CLIENT_X509_CERT_URL",
                    "value": "${GCP_CLIENT_X509_CERT_URL}"
                  }
                ],
              },
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "512",
            "memory": "1024",
            "executionRoleArn": "arn:aws:iam::${AWS_ACCOUNT_ID}:role/ecsTaskExecutionRole",
            "taskRoleArn": "arn:aws:iam::${AWS_ACCOUNT_ID}:role/ecsTaskExecutionRole"
          }
          EOF

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ecs-task-def.json
          service: stock-app-service-v2-nat
          cluster: stock-app-cluster
          wait-for-service-stability: true